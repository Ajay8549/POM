name: Build and Deploy Lex Bot

on:
  push:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run Linter
        run: |
          flake8 .


  codeQL:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  dependencyReview:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Dependency Review
        uses: advanced-security/dependency-review-action@v1

  build:
    runs-on: ubuntu-latest
    needs: [lint, codeQL, dependencyReview]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Build Lex Bot
        run: |
          python build_lex_bot.py

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::438465155677:oidc-provider/token.actions.githubusercontent.com
          aws-region: us-east-1

      - name: Deploy Lex Bot
        run: |
          aws lex-models put-bot \
            --name DoctorBookingBot \
            --cli-input-json file://bot.json

  package:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Package Build Files
        run: |
          mkdir -p build
          cp -r dist/* build/

      - name: Upload to JFrog
        uses: jfrog/setup-jfrog-cli@v1
        with:
          version: 2.x.x

      - name: Configure JFrog CLI
        run: jfrog rt config --interactive=false --url=${{ secrets.JFROG_URL }} --user=${{ secrets.JFROG_USER }} --password=${{ secrets.JFROG_PASSWORD }}

      - name: Upload to Artifactory
        run: jfrog rt upload "build/*" "artifactory-build-info/"

      - name: Xray Scan
        run: jfrog rt build-scan "my-build-name" "1"